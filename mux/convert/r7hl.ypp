%{
#include "omega.h"
#include "r7hgame.h"
int  r7hllex();
void r7hlerror(const char *s);

R7H_LOCKEXP *g_r7hKeyExp = NULL;

%}

%name-prefix "r7hl"
%debug
%union {
    R7H_LOCKEXP                *ple;
}

%token <ple> EVALLIT ATTRLIT DBREF
%type  <ple> term factor expr nested_r nested_ra
%start start

%%
start
:
    expr                         { g_r7hKeyExp = $1; };
;

expr:
    expr '|' term                { $$ = new R7H_LOCKEXP; $$->SetOr($1,$3);     }
|
    term                         { $$ = $1; }
;

term:
    factor '&' term              { $$ = new R7H_LOCKEXP; $$->SetAnd($1,$3);    }
|
    factor                       { $$ = $1; }
;

factor:
    '!' factor                   { $$ = new R7H_LOCKEXP; $$->SetNot($2);       }
|
    '@' nested_r                 { $$ = new R7H_LOCKEXP; $$->SetIndir($2);     }
|
    '=' nested_ra                { $$ = new R7H_LOCKEXP; $$->SetIs($2);        }
|
    '+' nested_ra                { $$ = new R7H_LOCKEXP; $$->SetCarry($2); }
|
    '$' nested_r                 { $$ = new R7H_LOCKEXP; $$->SetOwner($2);     }
|
    '(' expr ')'                 { $$ = $2; }
|
    ATTRLIT                      { $$ = $1; }
|
    EVALLIT                      { $$ = $1; }
|
    DBREF                        { $$ = $1; }
;

nested_r:
    DBREF                        { $$ = $1; }
|
    '(' nested_r  ')'            { $$ = $2; }
;

nested_ra:
    DBREF                        { $$ = $1; }
|
    ATTRLIT                      { $$ = $1; }
|
    '(' nested_ra  ')'           { $$ = $2; }
;

%%

void r7hlerror(const char *s)
{
}
